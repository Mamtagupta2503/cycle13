def application =params.Application
def action =params.Action
def datacenter =params.DC
def publishresults=''
def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')

pipeline {
    agent any

    stages {

		stage('Parallel execution') {
			parallel {
				stage('Job parameters'){
				steps {
						script{
							println "application : " + application
							println "Action : " + action
							println "datacenter : " + datacenter
						}
					}	
				}
				stage('CSS') {
					when {
						expression {
						'CSS' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								println "Performing "+ action +" on application CSS"								
								def serverdetails = readJSON file: 'Patching_cycle_13/CSS_test.json'
								//def serverdetails = readJSON file: 'CSS.json'
								def haproxyservers = serverdetails.HAPROXY_SERVERS 
								def nceserver = serverdetails.HANCESERVERS
								def ncwserver = serverdetails.HANCWSERVERS
								def backend = serverdetails.BACKEND
								def sockfileloc = serverdetails.SOCKFILE
								def server
								
			
								if(datacenter =='NCE'){
									 server = nceserver
									 println "NCE server are: " + server
								}
								else if(datacenter =='NCW'){
									server = ncwserver
									println "NCW server are: " + server
								}
								def CSSresult =performaction(haproxyservers, backend, server, action, sockfileloc )
								
								publishresults = publishresults + "CSS: " + result+ "\n"
									
									
							}catch(Exception e) {
								CSSresult ='Failed'
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
								}
							}
						}
					}      
				}
				stage('SOM') {
					when {
						expression {
						'SOM' in application||'ALL' in application
						}
					}
					steps {
						script{
							println "hello stage"								
							def serverdetails = readJSON file: 'SOM.json'
							//def serverdetails = readJSON file: 'Patching_cycle_13/SOM_test.json'
							def haproxyservers = serverdetails.HAPROXY_SERVERS 
							def nceserver = serverdetails.SOM_NCE_SERVERS
							def ncwserver = serverdetails.SOM_NCW_SERVERS
							def microservicesandport = serverdetails.MICROSVCS
							def sockfileloc = serverdetails.SOCKFILE
							def server

							
							if(datacenter =='NCE'){
								 server = nceserver
								 println "NCE server are: " + server
							}
							else if(datacenter =='NCW'){
								server = ncwserver
								println "NCW server are: " + server
							}
										
							println microservicesandport
							def output = performactiononsom(haproxyservers, microservicesandport, server, action, sockfileloc )
							// To Do : code for www-som-globalleadmanagementprocess-ssl
						}
					}      
				}
				stage('Phantom') {
					when {
						expression {
						'Phantom' in application||'ALL' in application
						}
					}
				steps {
					script{
						try {
							println "Performing "+ action +" on application Phantom"	
							//def serverdetails = readJSON file: 'Phantom.json'
							def serverdetails = readJSON file: 'Patching_cycle_13/Phantom_test.json'
							def haproxyservers = serverdetails.HAPROXY_SERVERS 
							def phantomnceserver = serverdetails.PHANTOM_NCE_SERVERS
							def phantomncwserver = serverdetails.PHANTOM_NCW_SERVERS
							def uinceserver= serverdetails.UI_NCE_SERVERS
							def uincwserver= serverdetails.UI_NCW_SERVERS
							def sockfileloc = serverdetails.SOCKFILE
							def phantomserver
							def uiserver

							if(datacenter =='NCE'){
								phantomserver = phantomnceserver
								uiserver =uinceserver
								println "NCE server are: " + phantomserver
							}
							else if(datacenter =='NCW'){
								phantomserver = phantomncwserver
								uiserver =uincwserver
								println "Phantom NCW server are: " + phantomserver
							}
							def phantomresult = performaction(haproxyservers, 'www-phantom-jvm-ssl', phantomserver, action, sockfileloc )
							def uiresult = performaction(haproxyservers, 'www-phantom-ui-ssl', uiserver, action, sockfileloc )
							// need to check other backend www-phantom-ui-ncw-ssl and www-phantom-ui-nce-ssl
							publishresults = publishresults + "PhantomJVM: " + phantomresult+ "\n"
							publishresults = publishresults + "PhantomUI: " + uiresult+ "\n"
							
						}catch(Exception e) {
							phantomresult ='Failed'
							uiresult ='Failed'
							catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
							}
						}
					}      
				}
			}     
			}
		} 
	}
	/*post {
	always {
			println publishresults
		}
	}*/
   /* post {
	always {
		sparkSend credentialsId: 'UnifiedBuyflowSparkBot', 
		message: " Job URL: ${env.JOB_URL} \n User: ${cause.userName} \n Application: [${Application}] \n Action: [${action}] \n DC: [${datacenter}] \n Build status: [${currentBuild.currentResult}] \n StageResult: [${publishresults}] ",
		spaceList: [[spaceId: '21f9d0e0-92b5-11ee-a0f4-6d1d3af5a51f', 
		spaceName: 'MamtaKT']]  
	}
} */
	
}
def performaction(Object haproxyservers, Object backend, Object server, String action, Object sockfileloc ){
	def result ='Success'
	for(ha in haproxyservers) {
		def SSH_OPTION="ssh jenkins_worker@${ha} -o StrictHostKeyChecking=no"
		for(bknd in backend) {
			for(s in server) {
				echo "$SSH_OPTION 'echo $action server $bknd/$s | sudo socat stdio $sockfileloc'"
				try{
					//sh "$SSH_OPTION 'echo $action server $bknd/$s | sudo socat stdio $sockfileloc'"
					
				}catch(Exception e) {
					result ='Failure'	
					catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
						sh "exit 1"
					}
				}
			}
		}
	}
	return result
}
def performactiononsom(Object haproxyservers, Object microservicesandport, Object server, String action, Object sockfileloc ){
	def somresult ='Success'
	def backend
	def portarray
	for(ha in haproxyservers) {
		def SSH_OPTION="ssh jenkins_worker@${ha} -o StrictHostKeyChecking=no"
		for(def msp in microservicesandport){
			backend =msp.key
			for(port in msp.value){
				for(s in server) {
					println "backend: " + " " + backend + " " + "port: " + " " + port + " " + "haproxy: " + " " + ha
					def servername = s+'-'+port	
					println servername
					echo "$SSH_OPTION 'echo $action server $backend/$servername | sudo socat stdio $sockfileloc'"
					try{
						//sh "$SSH_OPTION 'echo $action server $bknd/$s | sudo socat stdio $sockfileloc'"
					}catch(Exception e) {
						somresult ='Failure'	
						catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
							sh "exit 1"
						}
					}
				}
			}
		}
	}
return somresult
}

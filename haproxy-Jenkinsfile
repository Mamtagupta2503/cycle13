def application =params.Application
def action =params.Action
def datacenter =params.DC
def haproxyFromParam= params.haproxy
def backendFromParam =params.backend
def backendServersFromParam = params.backend_server
def publishResults=''
def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')

pipeline {
    agent any

    stages {

		stage('Parallel execution') {
			parallel {
				stage('Job parameters'){
				steps {
						script{
							println "application : " + application
							println "Action : " + action
							println "datacenter : " + datacenter
						}
					}	
				}
				stage('CSS') {
					when {
						expression {
						'CSS' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								println "Performing "+ action +" on application CSS"								
								def serverDetails = readJSON file: 'CSS.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def nceserver = serverDetails.CSS_NCE_SERVERS
								def ncwserver = serverDetails.CSS_NCW_SERVERS
								def backend = serverDetails.CSS_BACKENDS
								def sockFileLoc = serverDetails.SOCKFILE
								def result=''
								//def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								//def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def server
								
								if(application =='ALL') {
									if(datacenter =='NCE'){
										 server = nceserver
										 println "NCE server are: " + server
									}
									else if(datacenter =='NCW'){
										server = ncwserver
										println "NCW server are: " + server
									}
								}	
								else 
								{	
									//server = backendServersFromParamArray
									//HAProxyServers = haproxyFromParamArray
									//println "HAProxy server selected from parameter: " + haproxyFromParamArray
									//println "backend server selected from parameter: " + server
									println "mamta"
								}
								
								if(action=='Pre-Patching'||action='DRAIN')
								{	
									result = performAction(HAProxyServers, backend, server, 'DRAIN', sockFileLoc )
								}
								else if(action =='Post-Patching'||||action='READY')
								{
									result = performAction(HAProxyServers, backend, server, 'READY', sockFileLoc )
								}
								else if(action =='MAINT')
								{
									result = performAction(HAProxyServers, backend, server, 'MAINT', sockFileLoc )
								}	
								publishResults = publishResults + "CSS " + result+ "\n"									
							}catch(Exception e) {
								result ='Failed'
								publishResults = publishResults + "CSS: " + result+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
								}
							}
						}
					}      
				}
				stage('GPD') {
					when {
						expression {
						'GPD' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								println "Performing "+ action +" on application GPD"								
								def serverDetails = readJSON file: 'GPD.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def nceserver = serverDetails.GPD_NCE_SERVERS
								def ncwserver = serverDetails.GPD_NCW_SERVERS
								def backend = serverDetails.GPD_BACKEND
								def sockFileLoc = serverDetails.SOCKFILE
								//def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								//def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def server
								def result =''

								if(application =='ALL') {
									if(datacenter =='NCE'){
										 server = nceserver
										 println "NCE server are: " + server
									}
									else if(datacenter =='NCW'){
										server = ncwserver
										println "NCW server are: " + server
									}
								}	
								else 
								{	
									/*server = backendServersFromParamArray
									HAProxyServers = haproxyFromParamArray
									println "HAProxy server selected from parameter: " + haproxyFromParamArray
									println "backend server selected from parameter: " + server*/
									println "mamta"
								}
								if(action=='Pre-Patching'||action=='DRAIN')
									
								{	
									result =performAction(HAProxyServers, backend, server, 'DRAIN', sockFileLoc )
								}
								else if(action=='Post-Patching'||action=='READY')
								{
									result =performAction(HAProxyServers, backend, server, 'READY', sockFileLoc )
								}
								else if(action =='MAINT')
								{
									result =performAction(HAProxyServers, backend, server, 'MAINT', sockFileLoc )
								}					
								publishResults = publishResults + "GPD: " + result+ "\n"
								
							}catch(Exception e) {
								result ='Failed'
								publishResults = publishResults + "GPD: " + result+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
								}
							}
						}
					}      
				}
				stage('Siebel') {
					when {
						expression {
						'Siebel' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								println "Performing "+ action +" on application Siebel"
								def serverDetails = readJSON file: 'Siebel.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def nceserver = serverDetails.SIEBEL_NCE_SERVERS
								def ncwserver = serverDetails.SIEBEL_NCW_SERVERS
								def ncebackend= serverDetails.SIEBEL_NCE_BACKEND
								def ncwbackend= serverDetails.SIEBEL_NCW_BACKEND
								def sockFileLoc = serverDetails.SOCKFILE
								//def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								//def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def server
								def backend
								def result

								if(application =='ALL') {
									if(datacenter =='NCE'){
										server = nceserver
										backend =ncebackend
										println "NCE server: " + server + "NCE Backend: " + backend
									}
									else if(datacenter =='NCW'){
										server = ncwserver
										backend =backend
										println "NCW server: " + server + "NCW Backend: " + backend
									}
								}
								else 
								{	
									/*server = backendServersFromParamArray
									HAProxyServers = haproxyFromParamArray
									println "HAProxy server selected from parameter: " + haproxyFromParamArray
									println "backend server selected from parameter: " + server*/
									println "mamta"
								}
								
								if(action=='Pre-Patching'||action=='MAINT')
									{	
										result =performAction(HAProxyServers, backend, server, 'MAINT', sockFileLoc )
									}
									else if(action=='Post-Patching'||action=='READY')
									{
										result =performAction(HAProxyServers, backend, server, 'READY', sockFileLoc )
									}	
									
								publishResults = publishResults + "Siebel: " + result+ "\n"
								
							}catch(Exception e) {
								result ='Failed'
								publishResults = publishResults + "Siebel: " + result+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
									sh "exit 1"
								}
							}
						}      
					}
				}
				stage('Phantom') {
					when {
						expression {
						'Phantom' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								println "Performing "+ action +" on application Phantom"
								def serverDetails = readJSON file: 'Phantom.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def nceserver = serverDetails.PHANTOM_NCE_SERVERS
								def ncwserver = serverDetails.PHANTOM_NCW_SERVERS
								def phantomBackend =serverDetails.PHANTOM_BACKEND
								def uinceserver = serverDetails.UI_NCE_SERVERS
								def uincwserver = serverDetails.UI_NCW_SERVERS
								def uincebackend =serverDetails.UI_NCE_BACKEND
								def uincwbackend =serverDetails.UI_NCW_BACKEND
								def sockFileLoc = serverDetails.SOCKFILE
								//def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								//def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def phantomserver
								def uiserver
								def uibackend
								def PhantomResult
								def UIResult

								if(application =='ALL') {
									if(datacenter =='NCE'){
										phantomserver = nceserver
										uiserver = uinceserver
										uibackend =uincebackend
										println "NCE server: " + phantomserver + "Phantom UI NCE Server: " + uiserver + "UI NCE Backend: " +uibackend
										

									}
									else if(datacenter =='NCW'){
										phantomserver = ncwserver
										uiserver = uincwserver
										uibackend =uincwbackend
										println "NCW server: " + phantomserver + "Phantom UI NCW Server: " + uiserver + "UI NCW Backend: " +uibackend
									}
								}
								else 
								{	
									/*server = backendServersFromParamArray
									HAProxyServers = haproxyFromParamArray
									println "HAProxy server selected from parameter: " + haproxyFromParamArray
									println "backend server selected from parameter: " + server*/
									println "mamta"
								}
								
								if(action=='Pre-Patching'||action=='disable')
									{	
										PhantomResult =performAction(HAProxyServers, phantomBackend, phantomserver, 'disable', sockFileLoc )
										UIResult =performAction(HAProxyServers, uibackend, uiserver, 'disable', sockFileLoc )
									}
									else if(action=='Post-Patching'||action=='enable')
									{
										PhantomResult =performAction(HAProxyServers, backend, server, 'enable', sockFileLoc )
										UIResult =performAction(HAProxyServers, uibackend, uiserver, 'enable', sockFileLoc )
									}	
									
								publishResults = publishResults + "Phantom: " + PhantomResult+ "\n"
								publishResults = publishResults + "Phantom UI: " + UIResult+ "\n"
								
							}catch(Exception e) {
								PhantomResult ='Failed'
								publishResults = publishResults + "Phantom: " + PhantomResult+ "\n"
								UIResult ='Failed'
								publishResults = publishResults + "Phantom: " + UIResult+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
									sh "exit 1"
								}
							}
						}      
					}
				} 				
			}
		} 
	}
    post {
	always {
		println publishResults
		/*sparkSend credentialsId: 'UnifiedBuyflowSparkBot', 
		message: " Job URL: ${env.JOB_URL} \n BUILD_NUMBER: ${env.BUILD_NUMBER} \n User: ${cause.userName} \n Application: [${Application}] \n Action: [${action}] \n DC: [${datacenter}] \n Build status: [${currentBuild.currentResult}] \n StageResult: [${publishResults}] ",
		spaceList: [[spaceId: 'e26bdaf0-e471-11ed-8020-692d324207aa', 
		spaceName: 'Jenkins Job Status - OPS']]*/
	}
} 
	
}
def performAction(Object HAProxyServers, Object backend, Object server, String action, Object sockFileLoc ){
	def result =''
	for(ha in HAProxyServers) {
		def SSH_OPTION="ssh jenkins_worker@${ha} -o StrictHostKeyChecking=no"
		for(bknd in backend) {
			for(s in server) {
				println "$SSH_OPTION 'echo $action server $bknd/$s | sudo socat stdio $sockFileLoc'"
				try{
					//sh "$SSH_OPTION 'echo $action server $bknd/$s | sudo socat stdio $sockFileLoc'"
					result ='Success'
					
				}catch(Exception e) {
					result ='Failure'	
					catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
						sh "exit 1"
					}
				}
			}
		}
	}
	return result
}


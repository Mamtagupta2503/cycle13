def application =params.Application
def action =params.Action
def datacenter =params.DC
/*def haproxyFromParam= params.haproxy
def backendFromParam =params.backend
def backendServersFromParam = params.backend_server
def backendWithPortFromParam= params.backend_port*/
def publishResults=''
def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')

pipeline {
    agent any

    stages {

		stage('Parallel execution') {
			parallel {
				stage('Job parameters'){
				steps {
						script{
							println "application : " + application
							println "Action : " + action
							println "datacenter : " + datacenter
						}
					}	
				}
				
				stage('SOM') {
					when {
						expression {
						'SOM' in application||'ALL' in application
						}
					}
					steps {
						script{
							//try {
								println "Performing "+ action +" on application SOM"								
								def serverDetails = readJSON file: 'SOM.json'
								println "read success"
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def nceserver = serverDetails.SOM_NCE_SERVERS
								def ncwserver = serverDetails.SOM_NCW_SERVERS
								def backendWithPort = serverDetails.BACKEND_PORT
								def sockFileLoc = serverDetails.SOCKFILE
								//def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								//def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def server
								//def backendWithPortFromParamArray = Arrays.asList((backendWithPortFromParam).split(","))
								

								if(application =='ALL') {
									if(datacenter =='NCE'){
										 server = nceserver
										 println "NCE server are: " + server
									}
									else if(datacenter =='NCW'){
										server = ncwserver
										println "NCW server are: " + server
									}
								}	
								else 
								{	
									/*server = backendServersFromParamArray
									HAProxyServers = haproxyFromParamArray
									backendWithPort =backendWithPortFromParamArray
									println "HAProxy server selected from parameter: " + haproxyFromParamArray
									println "backend server selected from parameter: " + server*/
									println "som"
								}
								def result = performAction(HAProxyServers, backendWithPort, server, action, sockFileLoc )				
								publishResults = publishResults + "SOM: " + result+ "\n"
								
							/*}catch(Exception e) {
								result ='Failed'
								publishResults = publishResults + "SOM: " + result+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
								}
							}*/
						}
					}      
				}     
			}
		} 
	}
    post {
	always {
		println publishResults
		/*sparkSend credentialsId: 'UnifiedBuyflowSparkBot', 
		message: " Job URL: ${env.JOB_URL} \n BUILD_NUMBER: ${env.BUILD_NUMBER} \n User: ${cause.userName} \n Application: [${Application}] \n Action: [${action}] \n DC: [${datacenter}] \n Build status: [${currentBuild.currentResult}] \n StageResult: [${publishResults}] ",
		spaceList: [[spaceId: '21f9d0e0-92b5-11ee-a0f4-6d1d3af5a51f', 
		spaceName: 'MamtaKT']]*/
	}
} 
	
}
def performAction(Object haproxyservers, Object backendWithPort, Object server, String action, Object sockfileloc ){
	def result ='Success'
	def backend
	def portarray
	println "mamta"
	for(ha in haproxyservers) {
		def SSH_OPTION="ssh jenkins_worker@${ha} -o StrictHostKeyChecking=no"
		for(def bwp in backendWithPort)
		{
			backend =bwp.key
			for(port in bwp.value)
				{
					for(s in server) {
						println "$SSH_OPTION 'echo $action server $backend/$s-$port | sudo socat stdio $sockfileloc'"
					}
				}
			
		}
	}
	return result
}
